Input: "   -42"
Output: -42
Explanation: The first non-whitespace character is '-', which is the minus sign.
             Then take as many numerical digits as possible, which gets 42.
Example 3:

Input: "4193 with words"
Output: 4193
Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.
Example 4:

Input: "words and 987"
Output: 0
Explanation: The first non-whitespace character is 'w', which is not a numerical 
             digit or a +/- sign. Therefore no valid conversion could be performed.
Example 5:

Input: "-91283472332"
Output: -2147483648
Explanation: The number "-91283472332" is out of the range of a 32-bit signed integer.
             Thefore INT_MIN (âˆ’231) is returned.
             
             
import re 
class Solution:
    def myAtoi(self, s: str) -> int:
        s = s.lstrip()
        s = re.findall(r"^[+-]{0,1}[0-9]+", s)
        if not s:
            return 0
        t = int(s[0])
        if t > 2**31-1:
            return 2**31-1
        elif t < -2**31:
            return -2**31
        return t
